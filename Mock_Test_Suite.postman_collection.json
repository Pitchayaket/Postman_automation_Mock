{
	"info": {
		"_postman_id": "2666c7b1-646c-4d72-999e-2de6a50c64e4",
		"name": "Mock_Test_Suite",
		"description": "Mock Server API - please login on the right with username: dev_portal, password: dev_portal",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29873059"
	},
	"item": [
		{
			"name": "1.Generate ThaiQR",
			"item": [
				{
					"name": "TC_M0109_Generate QR successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.response.to.be.json;",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"qrCodeId\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.unset(\"request-ref\");",
									"pm.collectionVariables.unset(\"reference1\");",
									"pm.collectionVariables.unset(\"billerId\");",
									"",
									"const moment = require('moment');",
									"",
									"pm.collectionVariables.set(\"request-ref\", moment().format(\"yyyyMMDDHHmmss\"));",
									"pm.collectionVariables.set(\"reference1\", moment().format(\"yyyyMMDDHHmmss01\"));",
									"pm.collectionVariables.set(\"billerId\", moment().format(\"yyyyMMDDHHmmss0\"));",
									"pm.collectionVariables.set(\"requestDate\", moment().format(\"yyyy-MM-DD\"));",
									"pm.collectionVariables.set(\"requestTime\", moment().format(\"HH:mm:ss\"));",
									"pm.collectionVariables.set(\"transmit-date-time\", moment().format(\"yyyy-MM-DDTHH:mm:ss.855+07:00\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"qrPromptpayInfo\": {\n        \"billerId\": \"{{billerId}}\",\n        \"reference1\": \"{{reference1}}\",\n        \"reference2\": \"\", //should be unique for each request\n        \"reference3\": \"\"\n    },\n    \"amount\": \"179.00\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"requestTime\": \"{{requestTime}}\",\n    \"merchantCountry\": \"TH\",\n    \"merchantName\": \"KR98370\",\n    \"extra1\": \"extraInfo1\",\n    \"extra2\": \"extraInfo2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/qr-generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"qr-generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0110_ Generate QR failed-duplicated request-ref",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.response.to.be.json;",
									"    pm.test(\"Status code is 409\", function () {",
									"        pm.response.to.have.status(409);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"Duplicate data\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let dup_requestref = pm.collectionVariables.get(\"request-ref\");",
									"let dup_billerId = pm.collectionVariables.get(\"billerId\");",
									"let dup_reference1 = pm.collectionVariables.get(\"reference1\");",
									"",
									"pm.collectionVariables.set(\"dup_requestref\", dup_requestref);",
									"pm.collectionVariables.set(\"dup_billerId\", dup_billerId);",
									"pm.collectionVariables.set(\"dup_reference1\", dup_reference1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-30T11:07:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{dup_requestref}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"qrPromptpayInfo\": {\n        \"billerId\": \"{{dup_billerId}}\",\n        \"reference1\": \"{{dup_reference1}}\",\n        \"reference2\": \"\", //should be unique for each request\n        \"reference3\": \"\"\n    },\n    \"amount\": \"179.00\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"requestTime\": \"{{requestTime}}\",\n    \"merchantCountry\": \"TH\",\n    \"merchantName\": \"KR98370\",\n    \"extra1\": \"extraInfo1\",\n    \"extra2\": \"extraInfo2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/qr-generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"qr-generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0111_ Generate QR failed-ref-request longer than 50",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.response.to.be.json;",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"request-ref is invalid\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-30T11:07:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "202310300001000200300412345678000100020001000300045"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"qrPromptpayInfo\": {\n        \"billerId\": \"{{billerId}}\",\n        \"reference1\": \"{{reference1}}\",\n        \"reference2\": \"\", //should be unique for each request\n        \"reference3\": \"\"\n    },\n    \"amount\": \"179.00\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"requestTime\": \"{{requestTime}}\",\n    \"merchantCountry\": \"TH\",\n    \"merchantName\": \"KR98370\",\n    \"extra1\": \"extraInfo1\",\n    \"extra2\": \"extraInfo2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/qr-generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"qr-generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0112_ Generate QR failed-invalid Transmit-Date-Time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.response.to.be.json;",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"transmit-date-time is invalid\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023/10/30T11:07:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "202310300002"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"qrPromptpayInfo\": {\n        \"billerId\": \"{{billerId}}\",\n        \"reference1\": \"{{reference1}}\",\n        \"reference2\": \"\", //should be unique for each request\n        \"reference3\": \"\"\n    },\n    \"amount\": \"179.00\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"requestTime\": \"{{requestTime}}\",\n    \"merchantCountry\": \"TH\",\n    \"merchantName\": \"KR98370\",\n    \"extra1\": \"extraInfo1\",\n    \"extra2\": \"extraInfo2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/qr-generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"qr-generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0113_ Generate QR failed-invalid requestDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.response.to.be.json;",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"requestDate is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-30T11:07:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "202310300002"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"qrPromptpayInfo\": {\n        \"billerId\": \"{{billerId}}\",\n        \"reference1\": \"{{reference1}}\",\n        \"reference2\": \"\", //should be unique for each request\n        \"reference3\": \"\"\n    },\n    \"amount\": \"179.00\",\n    \"requestDate\": \"2023/10/30\",\n    \"requestTime\": \"{{requestTime}}\",\n    \"merchantCountry\": \"TH\",\n    \"merchantName\": \"KR98370\",\n    \"extra1\": \"extraInfo1\",\n    \"extra2\": \"extraInfo2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/qr-generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"qr-generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0114_ Generate QR failed-invalid requestTime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.response.to.be.json;",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"requestTime is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-30T11:07:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "202310300002"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"qrPromptpayInfo\": {\n        \"billerId\": \"{{billerId}}\",\n        \"reference1\": \"{{reference1}}\",\n        \"reference2\": \"\", //should be unique for each request\n        \"reference3\": \"\"\n    },\n    \"amount\": \"179.00\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"requestTime\": \"02:29 PM\",\n    \"merchantCountry\": \"TH\",\n    \"merchantName\": \"KR98370\",\n    \"extra1\": \"extraInfo1\",\n    \"extra2\": \"extraInfo2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/qr-generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"qr-generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0115_ Generate QR failed-invalid merchantName longer than 50",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.response.to.be.json;",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"    pm.expect(pm.response.text()).to.include(\"merchantName is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-30T11:07:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "202310300002"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"qrPromptpayInfo\": {\n        \"billerId\": \"{{billerId}}\",\n        \"reference1\": \"{{reference1}}\",\n        \"reference2\": \"\", //should be unique for each request\n        \"reference3\": \"\"\n    },\n    \"amount\": \"179.00\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"requestTime\": \"{{requestTime}}\",\n    \"merchantCountry\": \"TH\",\n    \"merchantName\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing eli\",\n    \"extra1\": \"extraInfo1\",\n    \"extra2\": \"extraInfo2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/qr-generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"qr-generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0116_ Generate QR failed-invalid merchantCountry longer than 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.response.to.be.json;",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"merchantCountry is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-30T11:07:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "202310300002"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"qrPromptpayInfo\": {\n        \"billerId\": \"{{billerId}}\",\n        \"reference1\": \"{{reference1}}\",\n        \"reference2\": \"\", //should be unique for each request\n        \"reference3\": \"\"\n    },\n    \"amount\": \"179.00\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"requestTime\": \"{{requestTime}}\",\n    \"merchantCountry\": \"THAILAND\",\n    \"merchantName\": \"KT2928\",\n    \"extra1\": \"extraInfo1\",\n    \"extra2\": \"extraInfo2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/qr-generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"qr-generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0117_ Generate QR failed-invalid amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.response.to.be.json;",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"amount is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-30T11:07:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "202310300002"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"qrPromptpayInfo\": {\n        \"billerId\": \"{{billerId}}\",\n        \"reference1\": \"{{reference1}}\",\n        \"reference2\": \"\", //should be unique for each request\n        \"reference3\": \"\"\n    },\n    \"amount\": \"699.-\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"requestTime\": \"{{requestTime}}\",\n    \"merchantCountry\": \"TH\",\n    \"merchantName\": \"KT2928\",\n    \"extra1\": \"extraInfo1\",\n    \"extra2\": \"extraInfo2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/qr-generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"qr-generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0118 Generate QR failed-invalid billerID longer than 15",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.response.to.be.json;",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"billerId is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-30T11:07:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "202310300002"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"qrPromptpayInfo\": {\n        \"billerId\": \"202310241519070123\",\n        \"reference1\": \"{{reference1}}\",\n        \"reference2\": \"\", //should be unique for each request\n        \"reference3\": \"\"\n    },\n    \"amount\": \"699.00\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"requestTime\": \"{{requestTime}}\",\n    \"merchantCountry\": \"TH\",\n    \"merchantName\": \"KT2928\",\n    \"extra1\": \"extraInfo1\",\n    \"extra2\": \"extraInfo2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/qr-generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"qr-generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0118_1 Generate QR failed-invalid billerID is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.response.to.be.json;",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"billerId is required\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-30T11:07:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "202310300002"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"qrPromptpayInfo\": {\n        \"billerId\": \"\",\n        \"reference1\": \"{{reference1}}\",\n        \"reference2\": \"\", //should be unique for each request\n        \"reference3\": \"\"\n    },\n    \"amount\": \"699.-\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"requestTime\": \"{{requestTime}}\",\n    \"merchantCountry\": \"TH\",\n    \"merchantName\": \"KT2928\",\n    \"extra1\": \"extraInfo1\",\n    \"extra2\": \"extraInfo2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/qr-generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"qr-generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0119 Generate QR failed-invalid reference1 longer than 50",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.response.to.be.json;",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"reference1 is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-30T11:07:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "202310300002"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"qrPromptpayInfo\": {\n        \"billerId\": \"{{billerId}}\",\n        \"reference1\": \"202310241555021001001001001001001\",\n        \"reference2\": \"\", //should be unique for each request\n        \"reference3\": \"\"\n    },\n    \"amount\": \"1790.00\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"requestTime\": \"{{requestTime}}\",\n    \"merchantCountry\": \"TH\",\n    \"merchantName\": \"KT2928\",\n    \"extra1\": \"extraInfo1\",\n    \"extra2\": \"extraInfo2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/qr-generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"qr-generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0119_1 Generate QR failed-invalid reference1 is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.response.to.be.json;",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"reference1 is required\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-30T11:07:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "202310300002"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"qrPromptpayInfo\": {\n        \"billerId\": \"{{billerId}}\",\n        \"reference1\": \"\",\n        \"reference2\": \"\", //should be unique for each request\n        \"reference3\": \"\"\n    },\n    \"amount\": \"1790.00\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"requestTime\": \"{{requestTime}}\",\n    \"merchantCountry\": \"TH\",\n    \"merchantName\": \"KT2928\",\n    \"extra1\": \"extraInfo1\",\n    \"extra2\": \"extraInfo2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/qr-generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"qr-generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0120 Generate QR failed-invalid reference2 longer than 30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"reference2 is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-30T11:07:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "202310300002"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"qrPromptpayInfo\": {\n        \"billerId\": \"{{billerId}}\",\n        \"reference1\": \"{{reference1}}\",\n        \"reference2\": \"20231024110901001001001001001001001\", //should be unique for each request\n        \"reference3\": \"\"\n    },\n    \"amount\": \"1790.00\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"requestTime\": \"{{requestTime}}\",\n    \"merchantCountry\": \"TH\",\n    \"merchantName\": \"KT2928\",\n    \"extra1\": \"extraInfo1\",\n    \"extra2\": \"extraInfo2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/qr-generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"qr-generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0121 Generate QR failed-invalid reference3 longer than 30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"reference3 is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-30T11:07:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "202310300002"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"qrPromptpayInfo\": {\n        \"billerId\": \"{{billerId}}\",\n        \"reference1\": \"{{reference1}}\",\n        \"reference2\": \"\", //should be unique for each request\n        \"reference3\": \"REF3240120231024170001001001001001001\"\n    },\n    \"amount\": \"1790.00\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"requestTime\": \"{{requestTime}}\",\n    \"merchantCountry\": \"TH\",\n    \"merchantName\": \"KT2928\",\n    \"extra1\": \"extraInfo1\",\n    \"extra2\": \"extraInfo2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/qr-generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"qr-generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0122 Generate QR failed-invalid extra1 longer than 50",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"extra1 is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-30T11:07:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "202310300002"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"qrPromptpayInfo\": {\n        \"billerId\": \"{{billerId}}\",\n        \"reference1\": \"{{reference1}}\",\n        \"reference2\": \"\", //should be unique for each request\n        \"reference3\": \"\"\n    },\n    \"amount\": \"1790.00\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"requestTime\": \"{{requestTime}}\",\n    \"merchantCountry\": \"TH\",\n    \"merchantName\": \"KT2928\",\n    \"extra1\": \"2023102511090100010001000100010001REF00010001REF00uZ\",\n    \"extra2\": \"extraInfo2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/qr-generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"qr-generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0123 Generate QR failed-invalid extra2 longer than 50",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"extra2 is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-30T11:07:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "202310300002"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"qrPromptpayInfo\": {\n        \"billerId\": \"{{billerId}}\",\n        \"reference1\": \"{{reference1}}\",\n        \"reference2\": \"\", //should be unique for each request\n        \"reference3\": \"\"\n    },\n    \"amount\": \"1790.00\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"requestTime\": \"{{requestTime}}\",\n    \"merchantCountry\": \"TH\",\n    \"merchantName\": \"KT2928\",\n    \"extra1\": \"\",\n    \"extra2\": \"extraInfo2-0001000100010001Qwedffgr000109889009jk011\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/qr-generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"qr-generate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2.Payment Request",
			"item": [
				{
					"name": "TC_M0101 Request Payment successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"paymentRequestId\");",
									"    });",
									"",
									"    let response = pm.response.json();",
									"    pm.collectionVariables.set(\"paymentRequestId\", response.paymentRequestId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthDevPortalPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthDevPortalUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId}}\",\n    \"reference1\": \"{{reference1}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"179.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\"\n}\n",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dev-portal/v1/payment-requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dev-portal",
								"v1",
								"payment-requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0102 Request Payment failed-non existing request-ref and mismatch biillerId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 404\", function () {",
									"        pm.response.to.have.status(404);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"QR Data not found\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthDevPortalPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthDevPortalUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-08-10T15:23:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "REF00000001"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"QR1001019990\",\n    \"reference1\": \"{{reference1}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"179.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\"\n}\n",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dev-portal/v1/payment-requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dev-portal",
								"v1",
								"payment-requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0124 Request Payment failed-Invalid request-ref longer than 50",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"request-ref is invalid\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthDevPortalPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthDevPortalUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-31T15:23:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "20231025095601202309151159053453484731510001000100010001"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId}}\",\n    \"reference1\": \"{{reference1}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"179.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\"\n}\n",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dev-portal/v1/payment-requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dev-portal",
								"v1",
								"payment-requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0124_1 Request Payment failed-Invalid request-ref is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"request-ref is required\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthDevPortalPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthDevPortalUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-31T15:23:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId}}\",\n    \"reference1\": \"{{reference1}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"179.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\"\n}\n",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dev-portal/v1/payment-requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dev-portal",
								"v1",
								"payment-requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0125 Request Payment failed-Invalid format of transmit-date-time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"transmit-date-time is invalid \");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthDevPortalPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthDevPortalUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023/10/31T15:23:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId}}\",\n    \"reference1\": \"{{reference1}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"179.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\"\n}\n",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dev-portal/v1/payment-requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dev-portal",
								"v1",
								"payment-requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0125_1 Request Payment failed-Invalid transmit-date-time is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"transmit-date-time is required\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthDevPortalPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthDevPortalUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": ""
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId}}\",\n    \"reference1\": \"{{reference1}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"179.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\"\n}\n",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dev-portal/v1/payment-requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dev-portal",
								"v1",
								"payment-requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0126 Request Payment failed-Invalid format of billerId longer than 15",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"billerId is not valid format\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthDevPortalPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthDevPortalUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-31T15:23:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"20231025142402001\",\n    \"reference1\": \"{{reference1}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"179.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\"\n}\n",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dev-portal/v1/payment-requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dev-portal",
								"v1",
								"payment-requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0126_1 Request Payment failed-Invalid billerId is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"billerId is required\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthDevPortalPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthDevPortalUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-31T15:23:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"\",\n    \"reference1\": \"{{reference1}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"179.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\"\n}\n",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dev-portal/v1/payment-requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dev-portal",
								"v1",
								"payment-requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0127 Request Payment failed-Invalid format of reference1 longer than 30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"reference1 is not valid format\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthDevPortalPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthDevPortalUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-31T15:23:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId}}\",\n    \"reference1\": \"2023102509560390001900190019001\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"179.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\"\n}\n",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dev-portal/v1/payment-requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dev-portal",
								"v1",
								"payment-requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0127_1 Request Payment failed-Invalid reference1 is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"reference1 is required\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthDevPortalPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthDevPortalUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-31T15:23:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId}}\",\n    \"reference1\": \"\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"179.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\"\n}\n",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dev-portal/v1/payment-requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dev-portal",
								"v1",
								"payment-requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0128 Request Payment failed-Invalid format of reference2 longer than 30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"reference2 is not valid format\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthDevPortalPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthDevPortalUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-31T15:23:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId}}\",\n    \"reference1\": \"{{reference1}}\",\n    \"reference2\": \"2023102515310309990990990998761234\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"179.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\"\n}\n",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dev-portal/v1/payment-requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dev-portal",
								"v1",
								"payment-requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0129 Request Payment failed-Invalid format of reference3 longer than 30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"reference3 is not valid format\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthDevPortalPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthDevPortalUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-31T15:23:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId}}\",\n    \"reference1\": \"{{reference1}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"ref32401123123334455433120098654\",\n    \"amount\": \"179.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\"\n}\n",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dev-portal/v1/payment-requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dev-portal",
								"v1",
								"payment-requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0130 Request Payment failed-Invalid format of amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"amount is not valid format\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthDevPortalPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthDevPortalUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-31T15:23:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId}}\",\n    \"reference1\": \"{{reference1}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"179.59.-\",\n    \"transDate\": \"{{requestDate}}\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\"\n}\n",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dev-portal/v1/payment-requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dev-portal",
								"v1",
								"payment-requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0131 Request Payment failed-Invalid format of transDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"transDate is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthDevPortalPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthDevPortalUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-31T15:23:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId}}\",\n    \"reference1\": \"{{reference1}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"179.00\",\n    \"transDate\": \"2023/10/31\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\"\n}\n",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dev-portal/v1/payment-requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dev-portal",
								"v1",
								"payment-requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0132 Request Payment failed-Invalid format of transTime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"transTime is not valid format\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthDevPortalPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthDevPortalUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-31T15:23:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId}}\",\n    \"reference1\": \"{{reference1}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"179.59.-\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"13.30.09\"\n}\n",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dev-portal/v1/payment-requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dev-portal",
								"v1",
								"payment-requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0107 Payment Inquiry failed - NOT PAID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"Transaction status is not compatible with this request\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"key": "request-ref",
								"value": "{{request-ref}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"qrPromptpayInfo\": {\r\n        \"billerId\": \"{{billerId}}\",\r\n        \"reference1\": \"{{reference1}}\",\r\n        \"reference2\": \"\", //should be unique for each request\r\n        \"reference3\": \"\"\r\n    },\r\n    \"qrCardInfo\": {\r\n        \"merchantId\": \"merchant123\",\r\n        \"merchantTransRef\": \"merchantTransRef123456\",\r\n        \"terminalId\": \"terminal123\",\r\n        \"amount\": \"1000.00\",\r\n        \"qrCodeId\": \"qrCodeId123\"\r\n    },\r\n    \"amount\": \"179.00\",\r\n    \"inquiryDate\": \"{{requestDate}}\",\r\n    \"inquiryTime\": \"{{requestTime}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/payment-inquiry",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"payment-inquiry"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3.GET Notification (Mark PAID)",
			"item": [
				{
					"name": "TC_M0103 Get Notification - mark PAID successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response",
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"approvalCode\");",
									"    });",
									"",
									"    response = pm.response.json();",
									"    pm.collectionVariables.set(\"approvalCode\", response.approvalCode)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthDevPortalPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthDevPortalUser}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/dev-portal/v1/notification/{{paymentRequestId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dev-portal",
								"v1",
								"notification",
								"{{paymentRequestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0104 Get Notification - failed paymentRequestId  doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 404\", function () {",
									"        pm.response.to.have.status(404);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"QR Data not found\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthDevPortalPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthDevPortalUser}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/dev-portal/v1/notification/39a7d7e776614d57xxx",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dev-portal",
								"v1",
								"notification",
								"39a7d7e776614d57xxx"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4.Verify Refund (Mark PRE-VOID)",
			"item": [
				{
					"name": "Pre-Step Generate ThaiQR for PREVOID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.response.to.be.json;",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"qrCodeId\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.unset(\"request-ref-prevoid\");",
									"pm.collectionVariables.unset(\"reference1-prevoid\");",
									"pm.collectionVariables.unset(\"billerId-prevoid\");",
									"",
									"const moment = require('moment');",
									"",
									"pm.collectionVariables.set(\"request-ref-prevoid\", moment().format(\"HHmmssyyyyMMDD\"));",
									"pm.collectionVariables.set(\"reference1-prevoid\", moment().format(\"HHmmssyyyyMMDD01\"));",
									"pm.collectionVariables.set(\"billerId-prevoid\", moment().format(\"HHmmssyyyyMMDD0\"));",
									"pm.collectionVariables.set(\"requestDate\", moment().format(\"yyyy-MM-DD\"));",
									"pm.collectionVariables.set(\"requestTime\", moment().format(\"HH:mm:ss\"));",
									"pm.collectionVariables.set(\"transmit-date-time\", moment().format(\"yyyy-MM-DDTHH:mm:ss.855+07:00\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-prevoid}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"qrPromptpayInfo\": {\n        \"billerId\": \"{{billerId-prevoid}}\",\n        \"reference1\": \"{{reference1-prevoid}}\",\n        \"reference2\": \"\", //should be unique for each request\n        \"reference3\": \"\"\n    },\n    \"amount\": \"1159.00\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"requestTime\": \"{{requestTime}}\",\n    \"merchantCountry\": \"TH\",\n    \"merchantName\": \"KR98370\",\n    \"extra1\": \"extraInfo1\",\n    \"extra2\": \"extraInfo2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/qr-generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"qr-generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-Step Request Payment for PREVOID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"paymentRequestId\");",
									"    });",
									"    let response = pm.response.json();",
									"    pm.collectionVariables.set(\"paymentRequestId\", response.paymentRequestId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthDevPortalPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthDevPortalUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-prevoid}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-prevoid}}\",\n    \"reference1\": \"{{reference1-prevoid}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1159.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\"\n}\n",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dev-portal/v1/payment-requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dev-portal",
								"v1",
								"payment-requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-Step Get Notification - mark PAID for PREVOID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response",
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"approvalCode\");",
									"    });",
									"",
									"    response = pm.response.json();",
									"    pm.collectionVariables.set(\"approvalCode-prevoid\", response.approvalCode)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthDevPortalPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthDevPortalUser}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/dev-portal/v1/notification/{{paymentRequestId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dev-portal",
								"v1",
								"notification",
								"{{paymentRequestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0133 Verify Refund (mark PRE-VOID) successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"transactionId\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-prevoid}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-prevoid}}\",\n    \"reference1\": \"{{reference1-prevoid}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1159.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-prevoid}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/verification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bug BAPI-204-209-210 TC_M0105 Payment Inquiry - PREVOID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        let jsonData = pm.response.json()",
									"        pm.expect(jsonData.data.statusMesg).to.include(\"PREVOID\");",
									"        pm.expect(jsonData.data.cardNetworkCode).to.include(\"01\");",
									"        pm.expect(jsonData.data.extra1).to.include(\"extraInfo1\");",
									"        pm.expect(jsonData.data.extra2).to.include(\"extraInfo2\");",
									"        pm.expect(jsonData.data.qrPromptpayInfo.termType).to.include(\"10\");",
									"        pm.expect(jsonData.data.qrPromptpayInfo.fromBank).to.include(\"BBL\");",
									"        pm.expect(jsonData.data.qrPromptpayInfo.fromName).to.include(\"Mr. John Doe\");",
									"        pm.expect(jsonData.data.qrPromptpayInfo.bankRef).to.include(\"bankRef\");",
									"        pm.expect(jsonData.data.qrCardInfo).to.be.exist;",
									"        pm.expect(jsonData.data.qrCardInfo.traceNum).to.be.exist;",
									"        pm.expect(jsonData.data.qrCardInfo.custPAN).to.be.exist;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"key": "request-ref",
								"value": "{{request-ref-prevoid}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"qrPromptpayInfo\": {\r\n        \"billerId\": \"{{billerId-prevoid}}\",\r\n        \"reference1\": \"{{reference1-prevoid}}\",\r\n        \"reference2\": \"\", //should be unique for each request\r\n        \"reference3\": \"\"\r\n    },\r\n    \"qrCardInfo\": {\r\n        \"merchantId\": \"merchant123\",\r\n        \"merchantTransRef\": \"merchantTransRef123456\",\r\n        \"terminalId\": \"terminal123\",\r\n        \"amount\": \"1000.00\",\r\n        \"qrCodeId\": \"qrCodeId123\"\r\n    },\r\n    \"amount\": \"179.00\",\r\n    \"inquiryDate\": \"{{requestDate}}\",\r\n    \"inquiryTime\": \"{{requestTime}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/payment-inquiry",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"payment-inquiry"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bug BAPI-204 TC_M0105 _1 Payment Inquiry - PREVOID request only qrPromptpayInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        let jsonData = pm.response.json()",
									"        pm.expect(jsonData.data.statusMesg).to.include(\"PREVOID\");",
									"        pm.expect(jsonData.data.cardNetworkCode).to.include(\"01\");",
									"        pm.expect(jsonData.data.extra1).to.include(\"extraInfo1\");",
									"        pm.expect(jsonData.data.extra2).to.include(\"extraInfo2\");",
									"        pm.expect(jsonData.data.qrPromptpayInfo.termType).to.include(\"10\");",
									"        pm.expect(jsonData.data.qrPromptpayInfo.fromBank).to.include(\"BBL\");",
									"        pm.expect(jsonData.data.qrPromptpayInfo.fromName).to.include(\"Mr. John Doe\");",
									"        pm.expect(jsonData.data.qrPromptpayInfo.bankRef).to.include(\"bankRef\");",
									"        pm.expect(jsonData.data.qrCardInfo).not.exist;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"key": "request-ref",
								"value": "{{request-ref-prevoid}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"qrPromptpayInfo\": {\r\n        \"billerId\": \"{{billerId-prevoid}}\",\r\n        \"reference1\": \"{{reference1-prevoid}}\",\r\n        \"reference2\": \"\", //should be unique for each request\r\n        \"reference3\": \"\"\r\n    },\r\n    \"amount\": \"179.00\",\r\n    \"inquiryDate\": \"{{requestDate}}\",\r\n    \"inquiryTime\": \"{{requestTime}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/payment-inquiry",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"payment-inquiry"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0134 Verify Refund (mark PRE-VOID) - failed request-ref longer than 50",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"request-ref is invalid\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023-10-31T15:23:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "REF00910110111900199012837h099k8998812256768789hjj00"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-prevoid}}\",\n    \"reference1\": \"{{reference1-prevoid}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1159.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-prevoid}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/verification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0135 Verify Refund (mark PRE-VOID) - failed Invalid format of transmit-date-time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"transmit-date-time is invalid\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023/10/31T15:23:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-prevoid}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-prevoid}}\",\n    \"reference1\": \"{{reference1-prevoid}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1159.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-prevoid}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/verification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bug BAPI-230 TC_M0136 Verify Refund (mark PRE-VOID) - failed transDate is in the past",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 214\", function () {",
									"        pm.response.to.have.status(214);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"Transaction too old to void.\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-prevoid}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-prevoid}}\",\n    \"reference1\": \"{{reference1-prevoid}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1159.00\",\n    \"transDate\": \"2023-10-25\",\n    \"transTime\": \"12:10:03\",\n    \"approvalCode\": \"{{approvalCode-prevoid}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/verification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0137 Verify Refund (mark PRE-VOID) failed already did PRE-VOID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 216\", function () {",
									"        pm.response.to.have.status(216);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"This transaction cannot be voided\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-prevoid}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-prevoid}}\",\n    \"reference1\": \"{{reference1-prevoid}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1159.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-prevoid}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/verification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0138 Verify Refund (mark PRE-VOID) failed transaction not found (billerID + approvalCode not found))",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 209\", function () {",
									"        pm.response.to.have.status(209);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"Transaction not found\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-prevoid}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"REF11111111\",\n    \"reference1\": \"{{reference1-prevoid}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1159.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"atest1\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/verification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0140 Verify Refund (mark PRE-VOID) invalid billerId longer than 15",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"billerId is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-prevoid}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"202310271K2702001001\",\n    \"reference1\": \"{{reference1-prevoid}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1159.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-prevoid}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/verification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0140_1 Verify Refund (mark PRE-VOID) invalid billerId is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"billerId is required\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-prevoid}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"\",\n    \"reference1\": \"{{reference1-prevoid}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1159.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-prevoid}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/verification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0141 Verify Refund (mark PRE-VOID) invalid reference1 longer than 30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"reference1 is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-prevoid}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-prevoid}}\",\n    \"reference1\": \"20231027102703k00100989090Uj018\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1159.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-prevoid}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/verification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0141_1 Verify Refund (mark PRE-VOID) invalid reference1 is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"reference1 is required\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-prevoid}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-prevoid}}\",\n    \"reference1\": \"\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1159.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-prevoid}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/verification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0142 Verify Refund (mark PRE-VOID) invalid reference2 longer than 30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"reference2 is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-prevoid}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-prevoid}}\",\n    \"reference1\": \"{{reference1-prevoid}}\",\n    \"reference2\": \"20231027102703k00100989090Uj018\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1159.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-prevoid}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/verification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0143 Verify Refund (mark PRE-VOID) invalid reference3 longer than 30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"reference3 is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-prevoid}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-prevoid}}\",\n    \"reference1\": \"{{reference1-prevoid}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"ref3240120231027000100010001987\",\n    \"amount\": \"1159.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-prevoid}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/verification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0144 Verify Refund (mark PRE-VOID) invalid format of transDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"transDate is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-prevoid}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-prevoid}}\",\n    \"reference1\": \"{{reference1-prevoid}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1159.00\",\n    \"transDate\": \"2023/10/31\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-prevoid}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/verification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0145 Verify Refund (mark PRE-VOID) invalid format of transTime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"transTime is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-prevoid}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-prevoid}}\",\n    \"reference1\": \"{{reference1-prevoid}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1159.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"7.45.05\",\n    \"approvalCode\": \"{{approvalCode-prevoid}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/verification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0146 Verify Refund (mark PRE-VOID) invalid format of amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"amount is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-prevoid}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-prevoid}}\",\n    \"reference1\": \"{{reference1-prevoid}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1890.75$\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-prevoid}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/verification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0147 Verify Refund (mark PRE-VOID) invalid approvalCode format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"approvalCode is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-prevoid}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-prevoid}}\",\n    \"reference1\": \"{{reference1-prevoid}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1159.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"df1000SF\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/verification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"verification"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5.Reversal Refund",
			"item": [
				{
					"name": "Pre-Step Generate ThaiQR for reversal refund",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.response.to.be.json;",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"qrCodeId\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.unset(\"request-ref-reversal\");",
									"pm.collectionVariables.unset(\"reference1-reversal\");",
									"pm.collectionVariables.unset(\"billerId-reversal\");",
									"",
									"const moment = require('moment');",
									"",
									"pm.collectionVariables.set(\"request-ref-reversal\", moment().format(\"HHmmssDDMMyyyy\"));",
									"pm.collectionVariables.set(\"reference1-reversal\", moment().format(\"HHmmssDDMMyyyy01\"));",
									"pm.collectionVariables.set(\"billerId-reversal\", moment().format(\"HHmmssDDMMyyyy0\"));",
									"pm.collectionVariables.set(\"requestDate\", moment().format(\"yyyy-MM-DD\"));",
									"pm.collectionVariables.set(\"requestTime\", moment().format(\"HH:mm:ss\"));",
									"pm.collectionVariables.set(\"transmit-date-time\", moment().format(\"yyyy-MM-DDTHH:mm:ss.855+07:00\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-reversal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"qrPromptpayInfo\": {\n        \"billerId\": \"{{billerId-reversal}}\",\n        \"reference1\": \"{{reference1-reversal}}\",\n        \"reference2\": \"\", //should be unique for each request\n        \"reference3\": \"\"\n    },\n    \"amount\": \"750.00\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"requestTime\": \"{{requestTime}}\",\n    \"merchantCountry\": \"TH\",\n    \"merchantName\": \"KR98370\",\n    \"extra1\": \"extraInfo1\",\n    \"extra2\": \"extraInfo2\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/qr-generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"qr-generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-Step Request Payment for reversal refund",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"paymentRequestId\");",
									"    });",
									"    let response = pm.response.json();",
									"    pm.collectionVariables.set(\"paymentRequestId\", response.paymentRequestId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthDevPortalPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthDevPortalUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-reversal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-reversal}}\",\n    \"reference1\": \"{{reference1-reversal}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"750.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\"\n}\n",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dev-portal/v1/payment-requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dev-portal",
								"v1",
								"payment-requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-Step Get Notification - mark PAID for reversal refund",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response",
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"approvalCode\");",
									"    });",
									"",
									"    response = pm.response.json();",
									"    pm.collectionVariables.set(\"approvalCode-reversal\", response.approvalCode)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthDevPortalPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthDevPortalUser}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/dev-portal/v1/notification/{{paymentRequestId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dev-portal",
								"v1",
								"notification",
								"{{paymentRequestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0159 Reversal Refund - failed transaction has not been marked as pre-void",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"        });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"This transaction has not been marked as pre-void\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-reversal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-reversal}}\",\n    \"reference1\": \"{{reference1-reversal}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"750.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-reversal}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/reversal",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"reversal"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-Step Verify Refund (mark PRE-VOID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"transactionId\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-reversal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-reversal}}\",\n    \"reference1\": \"{{reference1-reversal}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"750.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-reversal}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/verification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bug BAPI-232 TC_M0148 Reversal Refund successfully (PRE-VOID > PAID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    /*pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"transactionId\");",
									"    });*/",
									"    pm.test(\"Schema is valid\",() => {",
									"        const schema = {",
									"            type: 'object',",
									"            properties: {",
									"                responseCode: {",
									"                    type: 'string'",
									"                },",
									"                responseMesg: {",
									"                    type: 'string'",
									"                },",
									"                data: {",
									"                        billerId: {",
									"                            type: 'string'",
									"                        },",
									"                        reference1: {",
									"                            type: 'string'",
									"                        },",
									"                        amount: {",
									"                            type: 'decimal'",
									"                        },",
									"                        transactionId: {",
									"                            type: 'string'",
									"                        },",
									"                        additionalProperties: false",
									"                },",
									"                additionalProperties: false",
									"            }",
									"        };",
									"        pm.response.to.have.jsonSchema(schema);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-reversal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-reversal}}\",\n    \"reference1\": \"{{reference1-reversal}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"750.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-reversal}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/reversal",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"reversal"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bug BAPI-204-209-210 TC_M0104 Payment Inquiry - PAID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        let jsonData = pm.response.json()",
									"        pm.expect(jsonData.data.statusMesg).to.include(\"PAID\");",
									"        pm.expect(jsonData.data.extra1).to.include(\"extraInfo1\");",
									"        pm.expect(jsonData.data.extra2).to.include(\"extraInfo2\");",
									"        pm.expect(jsonData.data.cardNetworkCode).to.include(\"01\");",
									"        pm.expect(jsonData.data.qrPromptpayInfo.termType).to.include(\"10\");",
									"        pm.expect(jsonData.data.qrPromptpayInfo.fromBank).to.include(\"BBL\");",
									"        pm.expect(jsonData.data.qrPromptpayInfo.fromName).to.include(\"Mr. John Doe\");",
									"        pm.expect(jsonData.data.qrPromptpayInfo.bankRef).to.include(\"bankRef\");",
									"        pm.expect(jsonData.data.qrCardInfo).exist;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"key": "request-ref",
								"value": "{{request-ref-reversal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"qrPromptpayInfo\": {\r\n        \"billerId\": \"{{billerId-reversal}}\",\r\n        \"reference1\": \"{{reference1-reversal}}\"\r\n    },\r\n    \"qrCardInfo\": {\r\n        \"merchantId\": \"merchant123\",\r\n        \"merchantTransRef\": \"merchantTransRef123456\",\r\n        \"terminalId\": \"terminal123\",\r\n        \"amount\": \"1000.00\",\r\n        \"qrCodeId\": \"qrCodeId123\"\r\n    },\r\n    \"amount\": \"750.00\",\r\n    \"inquiryDate\": \"{{requestDate}}\",\r\n    \"inquiryTime\": \"{{requestTime}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/payment-inquiry",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"payment-inquiry"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0149 Reversal Refund - failed request-ref longer than 50",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"request-ref is invalid\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "202310270945010001000100010001000190981909981888181"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-reversal}}\",\n    \"reference1\": \"{{reference1-reversal}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"750.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-reversal}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/reversal",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"reversal"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0150 Reversal Refund - failed Invalid format of transmit-date-time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"transmit-date-time is invalid\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023/10/31T15:23:11.855+07:00"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-reversal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-reversal}}\",\n    \"reference1\": \"{{reference1-reversal}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"750.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-reversal}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/reversal",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"reversal"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0151 Reversal Refund - failed billerId longer than 15",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"billerId is not valid\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-reversal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"20231027102702001\",\n    \"reference1\": \"{{reference1-reversal}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"750.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-reversal}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/reversal",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"reversal"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0151_1 Reversal Refund - failed billerId is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"billerId is required\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-reversal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"\",\n    \"reference1\": \"{{reference1-reversal}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"750.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-reversal}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/reversal",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"reversal"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0152 Reversal Refund - failed reference1 longer than 30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"reference1 is not valid\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-reversal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-reversal}}\",\n    \"reference1\": \"20231027142303091128889019818911\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"750.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-reversal}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/reversal",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"reversal"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0152_1 Reversal Refund - failed reference1 is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"reference1 is required\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-reversal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-reversal}}\",\n    \"reference1\": \"\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"750.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-reversal}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/reversal",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"reversal"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0153 Reversal Refund - failed reference2 longer than 30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"reference2 is not valid\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-reversal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-reversal}}\",\n    \"reference1\": \"{{reference1-reversal}}\",\n    \"reference2\": \"20231027142304091128889019818911\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"750.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-reversal}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/reversal",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"reversal"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bug BAPI-224 TC_M0154 Reversal Refund - failed reference3 longer than 30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"reference3 is not valid\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-reversal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-reversal}}\",\n    \"reference1\": \"{{reference1-reversal}}\",\n    \"reference2\": \"\", \n    \"reference3\": \"20231027050001909001099010910091\",\n    \"amount\": \"750.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-reversal}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/reversal",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"reversal"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0155 Reversal Refund - failed invalid format of amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"amount is not valid\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-reversal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-reversal}}\",\n    \"reference1\": \"{{reference1-reversal}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1490.00.-\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-reversal}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/reversal",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"reversal"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0156 Reversal Refund - failed invalid format of transDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"transDate is not valid\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-reversal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-reversal}}\",\n    \"reference1\": \"{{reference1-reversal}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"750.00\",\n    \"transDate\": \"2023/10/31\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-reversal}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/reversal",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"reversal"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0157 Reversal Refund - failed invalid format of transTime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"transTime is not valid\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-reversal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-reversal}}\",\n    \"reference1\": \"{{reference1-reversal}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"750.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"00.15.09\",\n    \"approvalCode\": \"{{approvalCode-reversal}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/reversal",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"reversal"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bug BAPI-225 TC_M0158 Reversal Refund - failed invalid approvalCode longer than 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"approvalCode is not valid\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-reversal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-reversal}}\",\n    \"reference1\": \"{{reference1-reversal}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"750.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"4541e4001\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/reversal",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"reversal"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "6.Advice Refund",
			"item": [
				{
					"name": "Pre-Step Generate QR for VOID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"qrCodeId\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.unset(\"request-ref-void\");",
									"pm.collectionVariables.unset(\"reference1-void\");",
									"pm.collectionVariables.unset(\"billerId-void\");",
									"",
									"const moment = require('moment');",
									"",
									"pm.collectionVariables.set(\"request-ref-void\", moment().format(\"MMDDyyyyHHmmss\"));",
									"pm.collectionVariables.set(\"reference1-void\", moment().format(\"DDMMyyyyHHmmss1\"));",
									"pm.collectionVariables.set(\"billerId-void\", moment().format(\"DDMMyyyyHHmmss2\"));",
									"pm.collectionVariables.set(\"requestDate\", moment().format(\"yyyy-MM-DD\"));",
									"pm.collectionVariables.set(\"requestTime\", moment().format(\"HH:mm:ss\"));",
									"pm.collectionVariables.set(\"transmit-date-time\", moment().format(\"yyyy-MM-DDTHH:mm:ss.856+07:00\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-void}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"qrPromptpayInfo\": {\n        \"billerId\": \"{{billerId-void}}\",\n        \"reference1\": \"{{reference1-void}}\",\n        \"reference2\": \"\", //should be unique for each request\n        \"reference3\": \"\"\n    },\n    \"amount\": \"1450.00\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"requestTime\": \"{{requestTime}}\",\n    \"merchantCountry\": \"TH\",\n    \"merchantName\": \"TINY1234\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/qr-generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"qr-generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-Step Request Payment for VOID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response;",
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"paymentRequestId\");",
									"    });",
									"",
									"    response = pm.response.json();",
									"    pm.collectionVariables.set(\"paymentRequestId\", response.paymentRequestId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthDevPortalPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthDevPortalUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-void}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-void}}\",\n    \"reference1\": \"{{reference1-void}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1450.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"requestDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dev-portal/v1/payment-requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dev-portal",
								"v1",
								"payment-requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-Step Get Notification - mark PAID for VOID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response;",
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"approvalCode\");",
									"    });",
									"",
									"    response = pm.response.json();",
									"    pm.collectionVariables.set(\"approvalCode-advice\", response.approvalCode);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthDevPortalPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthDevPortalUser}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/dev-portal/v1/notification/{{paymentRequestId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dev-portal",
								"v1",
								"notification",
								"{{paymentRequestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M162 Advice Refund failed - Invalid request-ref longer than 50",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"request-ref is invalid\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "REF20231101000100020003000400r00050060006009880010002009800u677"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-void}}\",\n    \"reference1\": \"{{reference1-void}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1450.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-advice}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/advice",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"advice"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M163 Advice Refund failed - Invalid format of transmit-date-time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"transmit-date-time is invalid\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "2023/11/01"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-void}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-void}}\",\n    \"reference1\": \"{{reference1-void}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1450.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-advice}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/advice",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"advice"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M164 Advice Refund failed -  Invalid billerId longer than 15",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"billerId is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-void}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"1001r9802023110111\",\n    \"reference1\": \"{{reference1-void}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1450.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-advice}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/advice",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"advice"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M164_1 Advice Refund failed -  Invalid billerId is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"billerId is required\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-void}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"\",\n    \"reference1\": \"{{reference1-void}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1450.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-advice}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/advice",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"advice"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M165 Advice Refund failed -  Invalid reference1 longer than 30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"reference1 is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-void}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-void}}\",\n    \"reference1\": \"2023123001000200031123340550u809\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1450.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-advice}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/advice",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"advice"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M165_1 Advice Refund failed -  Invalid reference1 is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"reference1 is required\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-void}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-void}}\",\n    \"reference1\": \"\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1450.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-advice}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/advice",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"advice"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M166 Advice Refund failed -  Invalid reference2 longer than 30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"reference1 is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-void}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-void}}\",\n    \"reference1\": \"2023123001000200031123340550u809\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1450.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-advice}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/advice",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"advice"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bug BAPI-224 TC_M167 Advice Refund failed -  Invalid reference3 longer than 30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"reference3 is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-void}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-void}}\",\n    \"reference1\": \"{{reference1-void}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"20231030122604001001001001001234\",\n    \"amount\": \"1450.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-advice}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/advice",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"advice"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M168 Advice Refund failed -  Invalid format of amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"amount is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-void}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-void}}\",\n    \"reference1\": \"{{reference1-void}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1179.00$\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-advice}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/advice",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"advice"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M169 Advice Refund failed -  Invalid format transDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"transDate is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-void}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-void}}\",\n    \"reference1\": \"{{reference1-void}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1450.00\",\n    \"transDate\": \"2023/11/01\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-advice}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/advice",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"advice"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M170 Advice Refund failed -  Invalid format of transTime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"transTime is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-void}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-void}}\",\n    \"reference1\": \"{{reference1-void}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1450.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"14.15:03+7.00\",\n    \"approvalCode\": \"{{approvalCode-advice}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/advice",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"advice"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bug BAPI-225 TC_M171 Advice Refund failed -  Invalid approvalCode longer than 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"approvalCode is not valid format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-void}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-void}}\",\n    \"reference1\": \"{{reference1-void}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1450.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"feb9761222\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/advice",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"advice"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0172 Advice Refund failed - transaction not allow to VOID (not running Verify Refund to make it PRE_VOID before)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 216\", function () {",
									"        pm.response.to.have.status(216);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"Voiding not allowed on this Transaction\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-void}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-void}}\",\n    \"reference1\": \"{{reference1-void}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1450.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-advice}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/advice",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"advice"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-Step  Verify Refund (mark PRE-VOID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"transactionId\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-void}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-void}}\",\n    \"reference1\": \"{{reference1-void}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1450.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-advice}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/verification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bug BAPI-232 TC_M0161 Advice Refund successfully (mark PRE-VOID > VOID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    /*pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"transactionId\");",
									"    });*/",
									"    pm.test(\"Schema is valid\",() => {",
									"        const schema = {",
									"            type: 'object',",
									"            properties: {",
									"                responseCode: {",
									"                    type: 'string'",
									"                },",
									"                responseMesg: {",
									"                    type: 'string'",
									"                },",
									"                data: {",
									"                        billerId: {",
									"                            type: 'string'",
									"                        },",
									"                        reference1: {",
									"                            type: 'string'",
									"                        },",
									"                        amount: {",
									"                            type: 'decimal'",
									"                        },",
									"                        transactionId: {",
									"                            type: 'string'",
									"                        },",
									"                        additionalProperties: false",
									"                },",
									"                additionalProperties: false",
									"            }",
									"        };",
									"        pm.response.to.have.jsonSchema(schema);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-void}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-void}}\",\n    \"reference1\": \"{{reference1-void}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1450.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-advice}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/advice",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"advice"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bug BAPI-204-209-210 TC_M0106 Payment Inquiry - VOID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        let jsonData = pm.response.json()",
									"        pm.expect(jsonData.data.statusMesg).to.include(\"VOID\");",
									"        pm.expect(jsonData.data.cardNetworkCode).to.include(\"01\");",
									"        pm.expect(jsonData.data.extra1).not.exist;",
									"        pm.expect(jsonData.data.extra2).not.exist;",
									"        pm.expect(jsonData.data.qrPromptpayInfo.termType).to.include(\"10\");",
									"        pm.expect(jsonData.data.qrPromptpayInfo.fromBank).to.include(\"BBL\");",
									"        pm.expect(jsonData.data.qrPromptpayInfo.fromName).to.include(\"Mr. John Doe\");",
									"        pm.expect(jsonData.data.qrPromptpayInfo.bankRef).to.include(\"bankRef\");",
									"        pm.expect(jsonData.data.qrCardInfo).to.be.exist;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"key": "request-ref",
								"value": "{{request-ref-void}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"qrPromptpayInfo\": {\r\n        \"billerId\": \"{{billerId-void}}\",\r\n        \"reference1\": \"{{reference1-void}}\",\r\n        \"reference2\": \"\", //should be unique for each request\r\n        \"reference3\": \"\"\r\n    },\r\n    \"qrCardInfo\": {\r\n        \"merchantId\": \"merchant123\",\r\n        \"merchantTransRef\": \"merchantTransRef123456\",\r\n        \"terminalId\": \"terminal123\",\r\n        \"amount\": \"1000.00\",\r\n        \"qrCodeId\": \"qrCodeId123\"\r\n    },\r\n    \"amount\": \"1450.00\",\r\n    \"inquiryDate\": \"{{requestDate}}\",\r\n    \"inquiryTime\": \"{{requestTime}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/payment-inquiry",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"payment-inquiry"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bug BAPI-204 TC_M0106_1 Payment Inquiry - VOID request only qrCardInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        let jsonData = pm.response.json()",
									"        pm.expect(jsonData.data.cardNetworkCode).to.include(\"01\");",
									"        pm.expect(jsonData.data.qrCardInfo).to.be.exist;",
									"        pm.expect(jsonData.data.qrPromptpayInfo).not.to.be.exist;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"key": "request-ref",
								"value": "{{request-ref-void}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"qrCardInfo\": {\r\n        \"merchantId\": \"merchant123\",\r\n        \"merchantTransRef\": \"merchantTransRef123456\",\r\n        \"terminalId\": \"terminal123\",\r\n        \"amount\": \"1000.00\",\r\n        \"qrCodeId\": \"qrCodeId123\"\r\n    },\r\n    \"amount\": \"1450.00\",\r\n    \"inquiryDate\": \"{{requestDate}}\",\r\n    \"inquiryTime\": \"{{requestTime}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/payment-inquiry",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"payment-inquiry"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0106_2 Payment Inquiry - VOID request both card and promotpay but data not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 209\", function () {",
									"        pm.response.to.have.status(209);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"Transaction not found\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"key": "request-ref",
								"value": "{{request-ref-void}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"qrPromptpayInfo\": {\r\n        \"billerId\": \"REF100900900000\",\r\n        \"reference1\": \"REF2009999991\"\r\n    },\r\n    \"qrCardInfo\": {\r\n        \"merchantId\": \"merchant123\",\r\n        \"merchantTransRef\": \"merchantTransRef123456\",\r\n        \"terminalId\": \"terminal123\",\r\n        \"amount\": \"1000.00\",\r\n        \"qrCodeId\": \"qrCodeId123\"\r\n    },\r\n    \"amount\": \"1450.00\",\r\n    \"inquiryDate\": \"{{requestDate}}\",\r\n    \"inquiryTime\": \"{{requestTime}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/payment-inquiry",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"payment-inquiry"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0108 Payment Inquiry failed - send only qrCardInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 209\", function () {",
									"        pm.response.to.have.status(209);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"Transaction not found\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"key": "request-ref",
								"value": "{{request-ref-void}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"qrCardInfo\": {\r\n        \"merchantId\": \"merchant123\",\r\n        \"merchantTransRef\": \"merchantTransRef123456\",\r\n        \"terminalId\": \"terminal123\",\r\n        \"amount\": \"1000.00\",\r\n        \"qrCodeId\": \"qrCodeId123\"\r\n    },\r\n    \"amount\": \"1450.00\",\r\n    \"inquiryDate\": \"{{requestDate}}\",\r\n    \"inquiryTime\": \"{{requestTime}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/biller/v1/payment-inquiry",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"biller",
								"v1",
								"payment-inquiry"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0173 Advice Refund failed - transaction already VOID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 213\", function () {",
									"        pm.response.to.have.status(213);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"Transaction already void\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref-void}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-void}}\",\n    \"reference1\": \"{{reference1-void}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1450.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-advice}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/advice",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"advice"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_M0139 Verify Refund failed - transaction already VOID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is JSON\", function () {",
									"    pm.test(\"Status code is 213\", function () {",
									"        pm.response.to.have.status(213);",
									"    });",
									"",
									"    pm.test(\"Body contains string\",() => {",
									"        pm.expect(pm.response.text()).to.include(\"Transaction already void\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{basicAuthProxyPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{basicAuthProxyUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "transmit-date-time",
								"value": "{{transmit-date-time}}"
							},
							{
								"description": "(Required) This field should be unique for each sequence of request.",
								"key": "request-ref",
								"value": "{{request-ref}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"billerId\": \"{{billerId-void}}\",\n    \"reference1\": \"{{reference1-void}}\",\n    \"reference2\": \"\", //should be unique for each request\n    \"reference3\": \"\",\n    \"amount\": \"1450.00\",\n    \"transDate\": \"{{requestDate}}\",\n    \"transTime\": \"{{requestTime}}\",\n    \"approvalCode\": \"{{approvalCode-advice}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/refund/verification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"refund",
								"verification"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "request-ref",
			"value": ""
		},
		{
			"key": "reference1",
			"value": ""
		},
		{
			"key": "billerId",
			"value": ""
		},
		{
			"key": "requestDate",
			"value": ""
		},
		{
			"key": "requestTime",
			"value": ""
		},
		{
			"key": "transmit-date-time",
			"value": ""
		},
		{
			"key": "dup_requestref",
			"value": ""
		},
		{
			"key": "dup_billerId",
			"value": ""
		},
		{
			"key": "dup_reference1",
			"value": ""
		},
		{
			"key": "request-ref-void",
			"value": ""
		},
		{
			"key": "reference1-void",
			"value": ""
		},
		{
			"key": "billerId-void",
			"value": ""
		},
		{
			"key": "paymentRequestId",
			"value": ""
		},
		{
			"key": "approvalCode",
			"value": ""
		},
		{
			"key": "request-ref-prevoid",
			"value": ""
		},
		{
			"key": "reference1-prevoid",
			"value": ""
		},
		{
			"key": "billerId-prevoid",
			"value": ""
		},
		{
			"key": "approvalCode-prevoid",
			"value": ""
		},
		{
			"key": "request-ref-reversal",
			"value": ""
		},
		{
			"key": "reference1-reversal",
			"value": ""
		},
		{
			"key": "billerId-reversal",
			"value": ""
		},
		{
			"key": "approvalCode-reversal",
			"value": ""
		},
		{
			"key": "approvalCode-advice",
			"value": ""
		}
	]
}